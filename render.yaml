# render.yaml

services:

  #######################################################
  # 1) Redis (Managed KeyValue)                        #
  #######################################################
  - type: redis
    name: redis-cache
    plan: free

  #######################################################
  # 2) Auth Service (Python)                            #
  #######################################################
  - type: web
    name: auth-service
    dockerfilePath: ./auth_service/Dockerfile
    plan: free
    startCommand: python app.py

    env:
      REDIS_URL:            redis://redis-cache:6379/0
      AUTH_DATABASE_URI:    sqlite:///auth.db
      JWT_SECRET_KEY:       some_really_secure_key_32_chars

    # dependsOn здесь необязателен, т.к. Redis поднимается первым,
    # но можно явно задать:
    dependsOn:
      - redis-cache

  #######################################################
  # 3) User Service (Python)                            #
  #######################################################
  - type: web
    name: user-service
    dockerfilePath: ./user_service/Dockerfile
    plan: free
    startCommand: python app.py

    env:
      REDIS_URL:            redis://redis-cache:6379/0
      USER_DATABASE_URI:    sqlite:///user.db

    dependsOn:
      - auth-service
      - redis-cache

  #######################################################
  # 4) Certificate Service (Python)                     #
  #######################################################
  - type: web
    name: certificate-service
    dockerfilePath: ./certificate_service/Dockerfile
    plan: free
    startCommand: python app.py

    env:
      REDIS_URL:            redis://redis-cache:6379/0
      CERT_DATABASE_URI:    sqlite:///certs.db
      JWT_SECRET_KEY:       some_really_secure_key_32_chars

    dependsOn:
      - auth-service
      - user-service
      - redis-cache

  #######################################################
  # 5) Notification Worker (Celery + Python)            #
  #######################################################
  - type: worker
    name: notification-worker
    dockerfilePath: ./notification_service/Dockerfile

    startCommand: >
      sh -c "python app.py & celery -A celery_app.celery worker --loglevel=info"

    env:
      SMTP_HOST:            smtp.gmail.com
      SMTP_PORT:            "587"
      SMTP_USER:            sypyx1@gmail.com
      SMTP_PASS:            paad slgb prer aoac
      CERT_SERVICE_URL:     http://certificate-service.onrender.com
      USER_SERVICE_URL:     http://user-service.onrender.com
      JWT_SECRET_KEY:       some_really_secure_key_32_chars
      CELERY_BROKER_URL:    redis://redis-cache:6379/0
      CELERY_RESULT_BACKEND: redis://redis-cache:6379/0
      SMS_RU_API_KEY:       E4533D59-5983-8CAB-B496-279F04274AAF

    dependsOn:
      - certificate-service
      - user-service
      - redis-cache

  #######################################################
  # 6) Frontend Service (Node.js / Static)              #
  #######################################################
  - type: web
    name: frontend
    dockerfilePath: ./frontend/Dockerfile
    plan: free
    startCommand: npm start

    dependsOn:
      - auth-service
      - user-service
      - certificate-service
      - notification-worker
